{
    "statements": [
        "CREATE TABLE IF NOT EXISTS consumptions (table_id INTEGER PRIMARY KEY AUTOINCREMENT, consumption_id TEXT UNIQUE, customer_id TEXT NOT NULL, service TEXT, amount DECIMAL(10, 2) NOT NULL CHECK(amount >= 0) DEFAULT 0.00, counter INTEGER DEFAULT 1, time TEXT DEFAULT (datetime('now', 'localtime')), note TEXT);",
        "CREATE TABLE IF NOT EXISTS customers (table_id INTEGER PRIMARY KEY AUTOINCREMENT, customer_id TEXT UNIQUE, name TEXT NOT NULL UNIQUE, gender TEXT NOT NULL CHECK(gender IN('男', '女', '未知')) DEFAULT '未知', birthday DATE CHECK (birthday IS NULL OR date(birthday) IS NOT NULL), phone TEXT, first_consumption_id TEXT DEFAULT NULL, last_consumption_id TEXT DEFAULT NULL, total_amount DECIMAL(10, 2) NOT NULL CHECK(total_amount >= 0) DEFAULT 0.00, note TEXT);",
        "CREATE TABLE IF NOT EXISTS consumption_counter (day TEXT PRIMARY KEY, counter INTEGER DEFAULT 1);",
        "CREATE VIEW IF NOT EXISTS daily_sales_view AS SELECT date(time) AS day, SUM(amount) AS sales, COUNT(consumption_id) AS consumption_counts FROM consumptions GROUP BY day;",
        "CREATE VIEW IF NOT EXISTS services_view AS SELECT DISTINCT service FROM consumptions WHERE service IS NOT NULL;",
        "CREATE VIEW IF NOT EXISTS customer_names_view AS SELECT DISTINCT name FROM customers",
        "CREATE INDEX IF NOT EXISTS idx_consumptions_service ON consumptions(service);",
        "CREATE INDEX IF NOT EXISTS idx_consumptions_customer_time ON consumptions(customer_id, time);",
        "CREATE INDEX IF NOT EXISTS idx_customers_name ON customers(name);",
        "CREATE TRIGGER IF NOT EXISTS generate_customer_id AFTER INSERT ON customers BEGIN UPDATE customers SET customer_id = 'U' || substr('000000' || NEW.table_id, -6, 6) WHERE table_id = NEW.table_id; END;",
        "CREATE TRIGGER IF NOT EXISTS generate_consumption_id AFTER INSERT ON consumptions FOR EACH ROW WHEN NEW.consumption_id IS NULL BEGIN INSERT OR IGNORE INTO consumption_counter (day, counter) VALUES (strftime('%Y%m%d', NEW.time), 1); UPDATE consumption_counter SET counter = counter + 1 WHERE day = strftime('%Y%m%d', NEW.time); UPDATE consumptions SET consumption_id = 'OD' || strftime('%Y%m%d', NEW.time) || printf('%03d', (SELECT counter - 1 FROM consumption_counter WHERE day = strftime('%Y%m%d', NEW.time))) WHERE rowid = NEW.rowid; UPDATE customers SET total_amount = total_amount + NEW.amount, last_consumption_id = (SELECT consumption_id FROM consumptions WHERE rowid = NEW.rowid), first_consumption_id = COALESCE(first_consumption_id, (SELECT consumption_id FROM consumptions WHERE rowid = NEW.rowid)) WHERE customer_id = NEW.customer_id; END;",
        "CREATE TRIGGER IF NOT EXISTS update_customers_after_update_id AFTER UPDATE OF customer_id ON consumptions FOR EACH ROW BEGIN UPDATE customers SET total_amount = total_amount - OLD.amount, first_consumption_id = (SELECT consumption_id FROM consumptions WHERE customer_id = OLD.customer_id ORDER BY time ASC LIMIT 1), last_consumption_id = (SELECT consumption_id FROM consumptions WHERE customer_id = OLD.customer_id ORDER BY time DESC LIMIT 1) WHERE customer_id = OLD.customer_id; UPDATE customers SET total_amount = total_amount + NEW.amount, first_consumption_id = (SELECT consumption_id FROM consumptions WHERE customer_id = NEW.customer_id ORDER BY time ASC LIMIT 1), last_consumption_id = (SELECT consumption_id FROM consumptions WHERE customer_id = NEW.customer_id ORDER BY time DESC LIMIT 1) WHERE customer_id = NEW.customer_id; END;",
        "CREATE TRIGGER IF NOT EXISTS update_customer_after_update_amount AFTER UPDATE OF amount ON consumptions FOR EACH ROW BEGIN UPDATE customers SET total_amount = total_amount + (NEW.amount - OLD.amount) WHERE customer_id = NEW.customer_id;END;",
        "CREATE TRIGGER IF NOT EXISTS update_customer_after_delete AFTER DELETE ON consumptions FOR EACH ROW BEGIN UPDATE customers SET total_amount = total_amount - OLD.amount, first_consumption_id = (SELECT consumption_id FROM consumptions WHERE customer_id = OLD.customer_id ORDER BY time ASC LIMIT 1), last_consumption_id = (SELECT consumption_id FROM consumptions WHERE customer_id = OLD.customer_id ORDER BY time DESC LIMIT 1) WHERE customer_id = OLD.customer_id; END;"
    ]
}